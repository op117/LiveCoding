import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

#объявим функцию фикстурой Pytest
#autouse=True автоматически включает выполнение фикстуры для всех тестов, без необходимости явного указания этой фикстуры в параметрах тестовой функции.
#scope="function" будет создавать экземляр драйвера для каждого теста отдельно
@pytest.fixture(scope="function", autouse=True)
def driver(request):
    options = Options()
    # набор опций который позволит запускаться драйверу внутри сред где нет интерфейса
    # безголовый режим для CI, Docker
    # можно пока закоментить для локальной работы
    #options.add_argument("--headless")
    #указываем что не песочница, а реальный проект
    options.add_argument("--no-sandbox")
    # Эта команда отключает использование общей памяти (Shared Memory, /dev/shm) для хранения данных в браузере.
    # из-за ограничений контейнера докера
    options.add_argument("--disable-dev-shm-usage")
    # размер окна браузера
    options.add_argument("--window-size=1920,1080")

    # инициализируем драйвер
    # options=options: Здесь используется объект options, который был предварительно создан с настройками для Chrome.
    driver = webdriver.Chrome(options=options)

    # Конструкция request.cls.driver = driver чаще всего используется в контексте тестирования с помощью pytest в Python
    # request: Это встроенный фикстурный объект pytest, который предоставляет контекст выполнения теста. С его помощью можно получать доступ к информации о тестах, тестируемых классах и других элементах тестового окружения.
    # request.cls: Эта часть ссылается на класс, к которому относится данный тест (если тесты организованы внутри класса). В данном случае это объект класса, в котором запускается тест.
    # driver: Это объект, созданный с помощью WebDriver (например, для управления браузером через Selenium).
    # request.cls.driver = driver: Эта строка присваивает объект driver (экземпляр WebDriver) атрибуту driver текущего класса теста, что позволяет использовать этот объект в методах теста.
    request.cls.driver = driver

    # Как работает yield в фикстурах pytest:
    # Перед yield: Код до оператора yield выполняется один раз перед запуском теста. В данном случае driver инициализируется (например, запуск Chrome WebDriver).
    # yield driver: Эта строка передает объект driver тестам, которые используют эту фикстуру. Это позволяет тестам получать доступ к объекту WebDriver и использовать его в своих методах.
    # После yield: Код, который идет после оператора yield, выполняется после завершения теста или всех тестов (в зависимости от области действия фикстуры). Чаще всего здесь закрывается или очищается объект driver, например, вызовом driver.quit() для закрытия браузера.
    yield driver
    # закрываем браузер после прохождения тестов
    driver.quit()
